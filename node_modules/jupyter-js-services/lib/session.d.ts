import { IKernelSpecIds } from './ikernel';
import { INotebookSession, INotebookSessionManager, ISessionId, ISessionOptions } from './isession';
/**
 * An implementation of a notebook session manager.
 */
export declare class NotebookSessionManager implements INotebookSessionManager {
    /**
     * Construct a new notebook session manager.
     *
     * @param options - The default options for each session.
     */
    constructor(options: ISessionOptions);
    /**
     * Get the available kernel specs. See also [[getKernelSpecs]].
     *
     * @param options - Overrides for the default options.
     */
    getSpecs(options?: ISessionOptions): Promise<IKernelSpecIds>;
    /**
     * List the running sessions.  See also [[listRunningSessions]].
     *
     * @param options - Overrides for the default options.
     */
    listRunning(options?: ISessionOptions): Promise<ISessionId[]>;
    /**
     * Start a new session.  See also [[startNewSession]].
     *
     * @param options - Overrides for the default options, must include a
     *   `'notebookPath'`.
     */
    startNew(options: ISessionOptions): Promise<INotebookSession>;
    /**
     * Connect to a running session.  See also [[connectToSession]].
     *
     * @param options - Overrides for the default options.
     */
    connectTo(id: string, options?: ISessionOptions): Promise<INotebookSession>;
    /**
     * Get optionally overidden options.
     */
    private _getOptions(options);
    private _options;
}
/**
 * List the running sessions.
 *
 * #### Notes
 * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/jupyter-js-services/master/rest_api.yaml#!/sessions), and validates the response.
 *
 * The promise is fulfilled on a valid response and rejected otherwise.
 */
export declare function listRunningSessions(options: ISessionOptions): Promise<ISessionId[]>;
/**
 * Start a new session.
 *
 * #### Notes
 * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/jupyter-js-services/master/rest_api.yaml#!/sessions), and validates the response.
 *
 * The promise is fulfilled on a valid response and rejected otherwise.

 * Wrap the result in an NotebookSession object. The promise is fulfilled
 * when the session is fully ready to send the first message. If
 * the session fails to become ready, the promise is rejected.
 */
export declare function startNewSession(options: ISessionOptions): Promise<INotebookSession>;
/**
 * Connect to a running notebook session.
 *
 * #### Notes
 * If the session was already started via `startNewSession`, the existing
 * NotebookSession object is used as the fulfillment value.
 *
 * Otherwise, if `options` are given, we attempt to connect to the existing
 * session found by calling `listRunningSessions`.
 * The promise is fulfilled when the session is fully ready to send
 * the first message. If the session fails to become ready, the promise is
 * rejected.
 *
 * If the session was not already started and no `options` are given,
 * the promise is rejected.
 */
export declare function connectToSession(id: string, options?: ISessionOptions): Promise<INotebookSession>;
